def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
  localPropertiesFile.withReader('UTF-8') { reader ->
    localProperties.load(reader)
  }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
  throw new GradleException(
    "Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
  flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
  flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
  compileSdkVersion buildConfig.compileSdk

  defaultConfig {
    applicationId "com.burrowsapps.example.gif"
    minSdkVersion buildConfig.minSdk
    targetSdkVersion buildConfig.targetSdk
    versionCode flutterVersionCode.toInteger()
    versionName flutterVersionName
    resConfigs 'en'
    vectorDrawables.useSupportLibrary true
    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
  }

  compileOptions {
    sourceCompatibility versions.java
    targetCompatibility versions.java
  }

  buildTypes {
    debug {
      signingConfig signingConfigs.debug
    }

    release {
      minifyEnabled true
      shrinkResources true
      proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
      // Signing with the debug keys for now, so `flutter run --release` works.
      signingConfig signingConfigs.debug
    }
  }

  lintOptions {
    disable 'InvalidPackage'
  }

  packagingOptions {
    exclude '**/*.kotlin_module'
    exclude '**/*.version'
    exclude '**/kotlin*/**'
    exclude '**/*.txt'
    exclude '**/*.xml'
    exclude '**/*.properties'
  }
}

flutter {
  source '../..'
}

dependencies {
  implementation deps.kotlin.stdlib.jdk

  testImplementation 'junit:junit:4.12'

  androidTestImplementation 'com.android.support.test:runner:1.0.2'
  androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

tasks.withType(JavaCompile) {
  sourceCompatibility = versions.java
  targetCompatibility = versions.java

  configure(options) {
    compilerArgs << '-Xlint:all'
    compilerArgs << '-Xlint:-options'
    compilerArgs << '-Xlint:-classfile'
    compilerArgs << '-Werror'
    encoding = 'utf-8'
  }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
  kotlinOptions {
    jvmTarget = versions.java
    allWarningsAsErrors = true
  }
}
